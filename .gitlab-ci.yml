variables:
    TWINE_USERNAME: SECURE
    TWINE_PASSWORD: SECURE
    TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/

stages:
    - deploy
    - status

build:
    image: python:3.6
    stage: deploy
    before_script:
        - python3 -m pip install -U setuptools wheel twine
        - python3 -m pip install -U anybadge
    script:
        - python3 setup.py sdist bdist_wheel
        - if twine upload dist/*.tar.gz --verbose && twine upload dist/*.whl --verbose; then echo "PASSED JOB" && anybadge --label=pipeline --value=passing --file=build.svg passing=green failing=red; else echo "FAILED JOB" && anybadge --label=pipeline --value=failing --file=build.svg passing=green failing=red; fi
        - mkdir public; mv build.svg public/build.svg
    artifacts:
        paths:
            - public/
            - build/
            - dist/
            - cfd_reader.egg-info/
    only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
    - /^\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
    - /^test.*\d+.*$/
    environment:
        name: dev

pages:
    stage: status
    dependencies:
        - build
    script:
        - cd public
    artifacts:
        paths:
            - public/
    only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
    - /^\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
    - /^test.*\d+.*pages$/
# test:
#     image: python:3.6
#     stage: test
#     #before_script:
#     #    - python3 -m pip install -U setuptools wheel twine
#     script:
#         - mkdir ~/.cfd-faces && cd ~/.cfd-faces && mkdir images
#         - touch data.csv images.pickle
#         - python3 -m pip install cfd-reader
#         - python3 -c "import cfd_reader"
#     only:
#     - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
#     - /^\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
#     - /^\d+\.\d+\.\d+\.\d+([abc]\d*)?$/ # Developmental tag
#     environment:
#         name: dev
